import typing

from aiogram import types, F, Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from bot.database.models.sub import Sub
from bot.keyboards.inline.admin import admin_sub_add_choose_markup, admin_sub_add_confirm_markup, \
    admin_op_back_to_choose_b_c
from bot.service.misc.misc_admin import check_token_valid, admin_menu, sub_main, get_active_subs, sub_info

admin_router = Router()


@admin_router.callback_query(F.data == "sub")
async def profile_refill_initiate(call: types.CallbackQuery):
    await call.answer()
    await call.message.delete()
    await sub_main(call.message)


@admin_router.callback_query(F.data.startswith("sub_"))
async def sub_actions(call: types.CallbackQuery):
    await call.answer()
    await call.message.delete()

    action_: str = call.data.split("_")[1]

    if action_ == "add":
        await call.message.answer(
            text="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –û–ü:",
            reply_markup=admin_sub_add_choose_markup()
        )

    elif action_ == "added":
        await get_active_subs(call.message)


@admin_router.callback_query(F.data.startswith("op_"))
async def op_add_choice(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.delete()

    type_: str = call.data.split("_")[1]

    is_bot: bool = type_ == "bot"

    await state.set_state("op:type")
    await state.update_data(
        is_bot=is_bot
    )

    await state.set_state("op:data")

    await call.message.answer(f"""
–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
<code>
  {'–¢–æ–∫–µ–Ω –±–æ—Ç–∞ *' if is_bot else 'ID –∫–∞–Ω–∞–ª–∞'}
  –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ (–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
  {'–°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞' if is_bot else  '–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª'}
</code>

{'–ù–£–ñ–ù–û –î–û–ë–ê–í–ò–¢–¨ –ù–ê–®–ï–ì–û –ë–û–¢–ê –í –ê–î–ú–ò–ù–´ –≠–¢–û–ì–û –ö–ê–ù–ê–õ–ê' if ~is_bot else ''}
""", reply_markup=admin_op_back_to_choose_b_c())


@admin_router.message(StateFilter("op:data"))
async def op_add_data(message: types.Message, state: FSMContext):
    data = message.text

    if len(data.split("\n")) != 3:
        return await message.answer("–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ! –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 —Å—Ç—Ä–æ–∫–∏. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑.")

    data = [d.strip() for d in data.split("\n")]

    bot_token, title, link = data

    is_bot = (await state.get_data())['is_bot']

    if is_bot and not await check_token_valid(bot_token, message.bot.session):
        return await message.answer("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ–≤–∞–ª–∏–¥. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑.")

    await state.update_data(
        bot_token=str(bot_token).replace("-100", ""),
        title=title,
        link=link
    )
    await state.set_state("op:confirm")

    await message.answer(
        text=f"""
–î–∞–Ω–Ω—ã–µ –ø–æ –û–ü

–†–µ—Å—É—Ä—Å: {'ü§ñ' if is_bot else 'üö™'}
{'–¢–æ–∫–µ–Ω –±–æ—Ç–∞' if is_bot else 'ID –∫–∞–Ω–∞–ª–∞'}: <code>{str(bot_token).replace("-100", "")}</code>
–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏: <code>{title}</code>
–°—Å—ã–ª–∫–∞: <code>{link}</code>

–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ?
""",
        reply_markup=admin_sub_add_confirm_markup()
    )


@admin_router.callback_query(StateFilter("op:confirm"))
async def op_add_data(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.delete()

    if call.data == "yes":
        data = await state.get_data()
        await Sub.create(**data)
        await call.message.answer("–û–ü —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")

    elif call.data == "no":
        await call.message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ!")

    await admin_menu(call.message)
    await state.clear()


@admin_router.callback_query(F.data.startswith("checksub_"))
async def op_get_info(call: types.CallbackQuery):
    """–∏–Ω—Ñ–æ –ø–æ –æ–ø –∏ —É–¥–∞–ª–µ–Ω–∏–µ"""
    await call.answer()
    await call.message.delete()

    await sub_info(call.message, int(call.data.split("_")[1]))


@admin_router.callback_query(F.data.startswith("delsub_"))
async def op_get_info(call: types.CallbackQuery):
    """—É–¥–∞–ª–µ–Ω–µ –û–ü"""
    await call.answer()
    await call.message.delete()

    await Sub.filter(id=call.data.split("_")[1]).delete()

    await call.message.answer("–û–ü —É–¥–∞–ª–µ–Ω–æ.")
    await sub_main(call.message)